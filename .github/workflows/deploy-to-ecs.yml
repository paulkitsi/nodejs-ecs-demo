name: CI/CD for Node.js to Amazon ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js environment
      # - name: Set up Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '22'

      # # Step 3: Install dependencies
      # - name: Install dependencies
      #   run: npm install

      # # Step 4: Run tests
      # - name: Run tests
      #   run: npm test
      
      # Step 5: Configure AWS credentials (Add this step)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # Step 5: Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      # Step 6: Build and tag the Docker image
      - name: Build, tag, and push Docker image to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ vars.ECR_REGISTRY }}:${IMAGE_TAG} .
          docker push ${{ vars.ECR_REGISTRY }}:${IMAGE_TAG}
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Log in to AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # Step 2: Update ECS service with the new image
      - name: Deploy to Amazon ECS
        run: |
          IMAGE_TAG=${{ github.sha }}
          ECS_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION }} --region ${{ vars.AWS_REGION }} | jq '.taskDefinition')
          UPDATED_TASK_DEFINITION=$(echo $ECS_TASK_DEFINITION | jq --arg IMAGE "${{ vars.ECR_REGISTRY }}:${IMAGE_TAG}" '.containerDefinitions[0].image=$IMAGE')
          NEW_REVISION=$(echo $UPDATED_TASK_DEFINITION | jq 'del(.status,.taskDefinitionArn,.requiresAttributes,.compatibilities)')
          aws ecs register-task-definition --cli-input-json "$NEW_REVISION"
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER }} --service ${{ vars.ECS_SERVICE }} --force-new-deployment